@inproceedings{Petersen2011,
abstract = {Study selection in systematic reviews is prone to bias and there exist no commonly defined strategies of how to reduce the bias and resolve disagreement between researchers. This study aims at identifying strategies for bias reduction and disagreement resolution. A review of existing systematic reviews is conducted for study selection strategy identification. In total 13 different strategies have been identified. {\textcopyright} 2011 IEEE.},
author = {Petersen, Kai and Ali, Nauman Bin},
booktitle = {International Symposium on Empirical Software Engineering and Measurement},
doi = {10.1109/esem.2011.46},
issn = {19493789},
keywords = {Evidence based software engineering,Inclusion and exclusion,Paper selection,Systematic review},
pages = {351--354},
publisher = {IEEE Computer Society},
title = {{Identifying strategies for study selection in systematic reviews and maps}},
year = {2011}
}
@misc{
	Kitchenham2013,
abstract = {Context: Many researchers adopting systematic reviews (SRs) have also published papers discussing problems with the SR methodology and suggestions for improving it. Since guidelines for SRs in software engineering (SE) were last updated in 2007, we believe it is time to investigate whether the guidelines need to be amended in the light of recent research. Objective: To identify, evaluate and synthesize research published by software engineering researchers concerning their experiences of performing SRs and their proposals for improving the SR process. Method: We undertook a systematic review of papers reporting experiences of undertaking SRs and/or discussing techniques that could be used to improve the SR process. Studies were classified with respect to the stage in the SR process they addressed, whether they related to education or problems faced by novices and whether they proposed the use of textual analysis tools. Results: We identified 68 papers reporting 63 unique studies published in SE conferences and journals between 2005 and mid-2012. The most common criticisms of SRs were that they take a long time, that SE digital libraries are not appropriate for broad literature searches and that assessing the quality of empirical studies of different types is difficult. Conclusion: We recommend removing advice to use structured questions to construct search strings and including advice to use a quasi-gold standard based on a limited manual search to assist the construction of search stings and evaluation of the search process. Textual analysis tools are likely to be useful for inclusion/exclusion decisions and search string construction but require more stringent evaluation. SE researchers would benefit from tools to manage the SR process but existing tools need independent validation. Quality assessment of studies using a variety of empirical methods remains a major problem. {\textcopyright} 2013 Elsevier B.V. All rights reserved.},
author = {Kitchenham, Barbara and Brereton, Pearl},
booktitle = {Information and Software Technology},
doi = {10.1016/j.infsof.2013.07.010},
issn = {09505849},
keywords = {Mapping study,Systematic literature review,Systematic review,Systematic review methodology},
month = {dec},
number = {12},
pages = {2049--2075},
title = {{A systematic review of systematic review process research in software engineering}},
volume = {55},
year = {2013}
}
@incollection{Keele2007,
abstract = {The objective of this report is to propose comprehensive guidelines for systematic literature reviews appropriate for software engineering researchers, including PhD students. A systematic literature review is a means of evaluating and interpreting all available research relevant to a particular research question, topic area, or phenomenon of interest. Systematic reviews aim to present a fair evaluation of a research topic by using a trustworthy, rigorous, and auditable methodology. The guidelines presented in this report were derived from three existing guidelines used by medical researchers, two books produced by researchers with social science backgrounds and discussions with researchers from other disciplines who are involved in evidence-based practice. The guidelines have been adapted to reflect the specific problems of software engineering research. The guidelines cover three phases of a systematic literature review: planning the review, conducting the review and reporting the review. They provide a relatively high level description. They do not consider the impact of the research questions on the review procedures, nor do they specify in detail the mechanisms needed to perform meta-analysis.},
author = {Keele, Staffs},
booktitle = {Technical report, Ver. 2.3 EBSE Technical Report. EBSE},
file = {:home/lf/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kitchenham - 2007 - Guidelines for performing Systematic Literature Reviews in Software Engineering.pdf:pdf},
title = {{Guidelines for performing systematic literature reviews in software engineering}},
year = {2007}
}
@incollection{Salama2017,
abstract = {Self-adaptation has been driven by the need to achieve and maintain quality attributes in the face of the continuously changing requirements, as well as the uncertain demand during run-time. Designing architectures that exhibit a good trade-off between multiple quality attributes is challenging, especially in the case of self-adaptive software systems, due to the complexity, heterogeneity, and ultra-large scale of modern software systems. This challenge increases with the dynamic, open, and uncertain operating environment, as well as the need for complying to environmental, regulatory, and sustainability requirements; such as energy consumption regulations. This study aims at analyzing the research landscape that have explicitly addressed trade-offs management for self-adaptive software architectures, to obtain a comprehensive overview on the current state of research on this specialized area. A systematic mapping study was conducted to identify and analyze research works related to analyzing and managing trade-offs to support decision-making for self-adaptive software architectures. Twenty primary studies were evidently selected and analyzed to classify software paradigms, quality attributes considered, and the self-* properties that drive trade-offs management. The results show constant interest in finding solutions for trade-offs management at design-time and run-time, as well as the success of research initiatives even when new research challenges are found. The findings call for foundational framework to analyze and manage trade-offs for self-adaptive software architectures that can explicitly consider specific multiple quality attributes, the run-time dynamics, the uncertainty of the environment and the complex challenges of modern, ultra-large scale systems in particular given software paradigms.},
annote = {Ejemplo de SMS},
author = {Salama, M. and Bahsoon, R. and Bencomo, N.},
booktitle = {Managing Trade-offs in Adaptable Software Architectures},
doi = {10.1016/B978-0-12-802855-1.00011-3},
isbn = {9780128028551},
keywords = {Long-living software,Self-adaptation,Self-adaptive architecture,Self-awareness,Software architecture,Systematic mapping study,Trade-offs management},
pages = {249--297},
publisher = {Elsevier},
title = {{Managing Trade-offs in Self-Adaptive Software Architectures}},
year = {2017}
}
@article{Petersen2015,
abstract = {Context Systematic mapping studies are used to structure a research area, while systematic reviews are focused on gathering and synthesizing evidence. The most recent guidelines for systematic mapping are from 2008. Since that time, many suggestions have been made of how to improve systematic literature reviews (SLRs). There is a need to evaluate how researchers conduct the process of systematic mapping and identify how the guidelines should be updated based on the lessons learned from the existing systematic maps and SLR guidelines. Objective To identify how the systematic mapping process is conducted (including search, study selection, analysis and presentation of data, etc.); to identify improvement potentials in conducting the systematic mapping process and updating the guidelines accordingly. Method We conducted a systematic mapping study of systematic maps, considering some practices of systematic review guidelines as well (in particular in relation to defining the search and to conduct a quality assessment). Results In a large number of studies multiple guidelines are used and combined, which leads to different ways in conducting mapping studies. The reason for combining guidelines was that they differed in the recommendations given. Conclusion The most frequently followed guidelines are not sufficient alone. Hence, there was a need to provide an update of how to conduct systematic mapping studies. New guidelines have been proposed consolidating existing findings.},
author = {Petersen, Kai and Vakkalanka, Sairam and Kuzniarz, Ludwik},
doi = {10.1016/J.INFSOF.2015.03.007},
issn = {0950-5849},
journal = {Information and Software Technology},
keywords = {Guidelines,Software engineering,Systematic mapping studies},
month = {aug},
pages = {1--18},
publisher = {Elsevier},
title = {{Guidelines for conducting systematic mapping studies in software engineering: An update}},
volume = {64},
year = {2015}
}
@inproceedings{Russo2017,
abstract = {Big data es la informaci{\'{o}}n caracterizada por un volumen, velocidad y variedad alta de datos que requiere m{\'{e}}todos anal{\'{i}}ticos y tecnolog{\'{i}}as espec{\'{i}}ficas para poder ser gestionados y transformados en valor agregado para el usuario. El mercado de servicios de big data ha comenzado a crecer sostenidamente en los {\'{u}}ltimos a{\~{n}}os. Sin embargo, su r{\'{a}}pido crecimiento trae varios desaf{\'{i}}os a superar para la ingenier{\'{i}}a de software. Las arquitecturas de software se vuelven relevan-tes en este contexto donde los estilos y patrones tradicionales no son suficientes para su dise{\~{n}}o e implementaci{\'{o}}n. El objetivo de este trabajo es presentar un es-tudio de mapeo sistem{\'{a}}tico de la literatura que permita identificar y categorizar propuestas de arquitecturas de software en el contexto de big data. Se defini{\'{o}} un protocolo para realizar la b{\'{u}}squeda y el procesamiento de fuentes primarias. Se detectaron 90 propuestas de arquitecturas de software de big data. 53% son apli-caciones en la industria, 38% son arquitecturas te{\'{o}}ricas y el 9% restante son ar-quitecturas de referencia. Se detect{\'{o}} que solo 14% son especificadas con una no-taci{\'{o}}n de UML. De igual forma se observ{\'{o}} que 61% describen m{\'{u}}ltiples capas de la arquitectura de software, mientras que 21% describen el almacenamiento de datos, 10% el an{\'{a}}lisis de datos y 8% el procesamiento de datos. ResearchGate Logo Discover the world's research},
author = {Russo, Juan Pablo and Solari, Mart{\'{i}}n},
booktitle = {CIbSE 2017 - XX Ibero-American Conference on Software Engineering},
isbn = {9789873806988},
pages = {264--276},
title = {{Estudio de mapeo sistem{\'{a}}tico sobre arquitecturas de software para big data}},
url = {https://www.researchgate.net/publication/331001020_Estudio_de_Mapeo_Sistematico_sobre_Arquitecturas_de_Software_para_Big_Data},
year = {2017}
}
@article{Kitchenham2011,
abstract = {Context: We are strong advocates of evidence-based software engineering (EBSE) in general and systematic literature reviews (SLRs) in particular. We believe it is essential that the SLR methodology is used constructively to support software engineering research. Objective: This study aims to assess the value of mapping studies which are a form of SLR that aims to identify and categorise the available research on a broad software engineering topic. Method: We used a multi-case, participant-observer case study using five examples of studies that were based on preceding mapping studies. We also validated our results by contacting two other researchers who had undertaken studies based on preceding mapping studies and by assessing review comments related to our follow-on studies. Results: Our original case study identified 11 unique benefits that can accrue from basing research on a preceding mapping study of which only two were case specific. We also identified nine problems associated with using preceding mapping studies of which two were case specific. These results were consistent with the information obtained from the validation activities. We did not find an example of an independent research group making use of a mapping study produced by other researchers. Conclusion: Mapping studies can save time and effort for researchers and provide baselines to assist new research efforts. However, they must be of high quality in terms of completeness and rigour if they are to be a reliable basis for follow-on research. {\textcopyright} 2010 Elsevier B.V. All rights reserved.},
author = {Kitchenham, Barbara A. and Budgen, David and {Pearl Brereton}, O.},
doi = {10.1016/j.infsof.2010.12.011},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Case study,Mapping studies,Software engineering,Systematic literature review},
month = {jun},
number = {6},
pages = {638--651},
title = {{Using mapping studies as the basis for further research - A participant-observer case study}},
volume = {53},
year = {2011}
}
@inproceedings{DeMagalhaes2014,
abstract = {Context. A recent mapping study intended to verify the current state of replication of empirical studies in Software Engineering (SE) identified two sets of studies: the empirical studies reporting actually replications and a second group of studies that were concerned with concepts, classifications, guidelines, and other themes about replication. Objective. The purpose of this research is to analyze and discuss the content of the second set of studies about replications published between 1996 and 2013. Method. This is a mapping study, in which the primary studies were collected by two previous mapping studies covering the period 1996-2012 complemented by a non-systematic search that collected some articles published in 2013. Results. We analyzed 36 papers reporting empirical and non-empirical studies about replications in SE published in the last 17 years. These papers explored different topics related to concepts and classifications, presented guidelines, and discussed theoretical issues that are relevant for our understanding of replication in our field. Copyright 2014 ACM.},
author = {{De Magalh{\~{a}}es}, Cleyton V.C. and {Da Silva}, Fabio Q.B. and Santos, Ronnie E.S.},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2601248.2601289},
isbn = {9781450324762},
keywords = {Empirical software engineering,Experimental replication,Replication},
publisher = {Association for Computing Machinery},
title = {{Investigations about replication of empirical studies in Software Engineering: Preliminary findings from a mapping study}},
year = {2014}
}
@inproceedings{Wohlin2014,
abstract = {Background: Systematic literature studies have become common in software engineering, and hence it is important to understand how to conduct them efficiently and reliably. Objective: This paper presents guidelines for conducting literature reviews using a snowballing approach, and they are illustrated and evaluated by replicating a published systematic literature review. Method: The guidelines are based on the experience from conducting several systematic literature reviews and experimenting with different approaches. Results: The guidelines for using snowballing as a way to search for relevant literature was successfully applied to a systematic literature review. Conclusions: It is concluded that using snowballing, as a first search strategy, may very well be a good alternative to the use of database searches. Copyright 2014 ACM.},
author = {Wohlin, Claes},
booktitle = {ACM International Conference Proceeding Series},
doi = {10.1145/2601248.2601268},
isbn = {9781450324762},
keywords = {Replication,Snowball search,Snowballing,Systematic literature review,Systematic mapping studies},
publisher = {Association for Computing Machinery},
title = {{Guidelines for snowballing in systematic literature studies and a replication in software engineering}},
year = {2014}
}
@article{Wieringa2006,
author = {Wieringa, Roel and Maiden, Neil and Mead, Nancy and Rolland, Colette},
doi = {10.1007/s00766-005-0021-6},
file = {:home/lf/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wieringa et al. - 2006 - Requirements engineering paper classification and evaluation criteria A proposal and a discussion.pdf:pdf},
issn = {09473602},
journal = {Requirements Engineering},
keywords = {Paper classification,Paper evaluation criteria,Requirements engineering research,Research methods},
month = {mar},
number = {1},
pages = {102--107},
title = {{Requirements engineering paper classification and evaluation criteria: A proposal and a discussion}},
volume = {11},
year = {2006}
}
@inproceedings{Kitchenham2006,
abstract = {This keynote addresses the evidence-based paradigm currently being adopted in many practical sciences (e.g., medicine, education, social policy) and discusses whether it is applicable to software engineering. In the presentation, the view is taken that although Evidence-based Software Engineering may be unproven, one aspect of the evidence-based paradigm is hard to ignore, that is: Systematic literature reviews. Systematic literature reviews aim to summarize research studies related to a specific research question in a way that is fair, rigorous, and auditable. The keynote presentation will outline the potential benefit of systematic literature reviews and describe in detail the process of performing such a systematic literature review. {\textcopyright} Springer-Verlag Berlin Heidelberg 2006.},
author = {Kitchenham, Barbara},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/11767718_3},
isbn = {3540346821},
issn = {16113349},
pages = {3},
title = {{Evidence-based software engineering and systematic literature reviews}},
volume = {4034 LNCS},
year = {2006}
}
