" All system-wide defaults are set in $VIMRUNTIME/archlinux.vim (usually just
" /usr/share/vim/vimfiles/archlinux.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vimrc), since archlinux.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing archlinux.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages.
runtime! archlinux.vim

" If you prefer the old-style vim functionalty, add 'runtime! vimrc_example.vim'
" Or better yet, read /usr/share/vim/vim80/vimrc_example.vim or the vim manual
" and configure vim to your own liking!

" do not load defaults if ~/.vimrc is missing
"let skip_defaults_vim=1

setlocal spell spelllang=en_us,es_es

let @c = "I[//]: # "

" Sorts numbers in ascending order.
" Examples:
" [2, 3, 1, 11, 2] --> [1, 2, 2, 3, 11]
" ['2', '1', '10','-1'] --> [-1, 1, 2, 10]
" function! Sorted(list)
"   " Make sure the list consists of numbers (and not strings)
"   " This also ensures that the original list is not modified
"   let nrs = ToNrs(a:list)
"   let sortedList = sort(nrs, "NaturalOrder")
"   echo sortedList
"   return sortedList
" endfunction
" 
" " Comparator function for natural ordering of numbers
" function! NaturalOrder(firstNr, secondNr)
"   if a:firstNr < a:secondNr
"     return -1
"   elseif a:firstNr > a:secondNr
"     return 1
"   else
"     return 0
"   endif
" endfunction
" 
" " Coerces every element of a list to a number. Returns a new list without
" " modifying the original list.
" function! ToNrs(list)
"   let nrs = []
"   for elem in a:list
"     let nr = 0 + elem
"     call add(nrs, nr)
"   endfor
"   return nrs
" endfunction
" 
" function! WordFrequency() range
"   " Words are separated by whitespace or punctuation characters
"   let wordSeparators = '[[:blank:][:punct:]]\+'
"   let allWords = split(join(getline(a:firstline, a:lastline)), wordSeparators)
"   let wordToCount = {}
"   for word in allWords
"     let wordToCount[word] = get(wordToCount, word, 0) + 1
"   endfor
" 
"   let countToWords = {}
"   for [word,cnt] in items(wordToCount)
"     let words = get(countToWords,cnt,"")
"     " Append this word to the other words that occur as many times in the text
"     let countToWords[cnt] = words . " " . word
"   endfor
" 
"   " Create a new buffer to show the results in
"   new
"   setlocal buftype=nofile bufhidden=hide noswapfile tabstop=20
" 
"   " List of word counts in ascending order
"   let sortedWordCounts = Sorted(keys(countToWords))
" 
"   call append("$", "count \t words")
"   call append("$", "--------------------------")
"   " Show the most frequent words first -> Descending order
"   for cnt in reverse(sortedWordCounts)
"     let words = countToWords[cnt]
"     call append("$", cnt . "\t" . words)
"   endfor
" endfunction
" 
" command! -range=% WordFrequency <line1>,<line2>call WordFrequency()
